@page "/artists/edit"
@using Microsoft.EntityFrameworkCore
@using TRUMPet.Domain
@inject IDbContextFactory<TRUMPet.Data.TRUMPetContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Artist</h2>
<hr />
@if (Artist is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Artist" OnValidSubmit="UpdateArtist" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Artist.ArtistID" value="@Artist.ArtistID" />
                <div class="mb-3">
                    <label for="songid" class="form-label">SongID:</label>
                    <InputNumber id="songid" @bind-Value="Artist.SongID" class="form-control" />
                    <ValidationMessage For="() => Artist.SongID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateadded" class="form-label">DateAdded:</label>
                    <InputDate id="dateadded" @bind-Value="Artist.DateAdded" class="form-control" />
                    <ValidationMessage For="() => Artist.DateAdded" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="artistname" class="form-label">Artistname:</label>
                    <InputText id="artistname" @bind-Value="Artist.Artistname" class="form-control" />
                    <ValidationMessage For="() => Artist.Artistname" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="songname" class="form-label">SongName:</label>
                    <InputText id="songname" @bind-Value="Artist.SongName" class="form-control" />
                    <ValidationMessage For="() => Artist.SongName" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/artists">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ArtistID { get; set; }

    [SupplyParameterFromForm]
    private Artist? Artist { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Artist ??= await context.Artist.FirstOrDefaultAsync(m => m.ArtistID == ArtistID);

        if (Artist is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateArtist()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Artist!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ArtistExists(Artist!.ArtistID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/artists");
    }

    private bool ArtistExists(int artistid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Artist.Any(e => e.ArtistID == artistid);
    }
}
