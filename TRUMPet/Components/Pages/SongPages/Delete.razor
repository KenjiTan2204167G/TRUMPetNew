@page "/songs/delete"
@using Microsoft.EntityFrameworkCore
@using TRUMPet.Domain
@inject IDbContextFactory<TRUMPet.Data.TRUMPetContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Song</h2>
    <hr />
    @if (song is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">GenreID</dt>
            <dd class="col-sm-10">@song.GenreID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ArtistID</dt>
            <dd class="col-sm-10">@song.ArtistID</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateAdded</dt>
            <dd class="col-sm-10">@song.DateAdded</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Artistname</dt>
            <dd class="col-sm-10">@song.Artistname</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">SongName</dt>
            <dd class="col-sm-10">@song.SongName</dd>
        </dl>
        <EditForm method="post" Model="song" OnValidSubmit="DeleteSong" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(song is null)">Delete</button> |
            <a href="/songs">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Song? song;

    [SupplyParameterFromQuery]
    private int SongID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        song = await context.Song.FirstOrDefaultAsync(m => m.SongID == SongID);

        if (song is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteSong()
    {
        using var context = DbFactory.CreateDbContext();
        context.Song.Remove(song!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/songs");
    }
}
