@page "/staff/delete"
@using Microsoft.EntityFrameworkCore
@using TRUMPet.Domain
@inject IDbContextFactory<TRUMPet.Data.TRUMPetContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Staff</h2>
    <hr />
    @if (staff is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@staff.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email</dt>
            <dd class="col-sm-10">@staff.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">PasswordHash</dt>
            <dd class="col-sm-10">@staff.PasswordHash</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Role</dt>
            <dd class="col-sm-10">@staff.Role</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@staff.DateCreated</dd>
        </dl>
        <EditForm method="post" Model="staff" OnValidSubmit="DeleteStaff" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(staff is null)">Delete</button> |
            <a href="/staff">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Staff? staff;

    [SupplyParameterFromQuery]
    private int StaffID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        staff = await context.Staff.FirstOrDefaultAsync(m => m.StaffID == StaffID);

        if (staff is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteStaff()
    {
        using var context = DbFactory.CreateDbContext();
        context.Staff.Remove(staff!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/staff");
    }
}
